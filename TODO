
DONE

* The slider's are not in a good position, and break the entire page if uncommented.
* put the slider in a drop down
* why is the spacial array debug white? shouldn't it be blue? <- (clamp was backwards)
* rendering of boids is broken, they are at the wrong angle
* dt is being multiplied by 60 in the js_go_main, need to change all the math to fix that
* the separation factor isn't working i think. not strong enough.
* replace "random draw forces" in boid simulation.
* use random generator for the random draw forces.
* in Update boids position and velocities. factor out random numbers
* upgrade the meta programming to accept different types.
* move all the html and web stuff into a different folder, (but some files need to be in the base folder for the github pages thing to work...)
* add a Boid number parameter (int), to the web side can change it.
* add toggles to the parameters as well.
* check for invalid property tags.
* setup_sliders.ts: // TODO use step. might clean this up a bit.
* make the toggles look good.
* boids bounce off walls
* boids hit obstacles, put a big rect in the middle of the screen.
* Put most of everything into one package.
* boids follow mouse on mouse down
* Vector2 to Vec2
* make an animation on click.
* use float colors in image.go
* update the image.go file with generics. and make a better api
* make a cool click animation.
* move everything into a single go module
* have typescript control the walls, make more walls. with right click and drag?
* use middle_held in boid make new walls
* make boids see in front of them. (with rays?)
* boids dodge obstacles, put a big rect in the middle of the screen.
* fix alignment calculation, remove all traces of max_speed.
* make the sim feel gooder.
* make Vision respect boundary. also drawing.
* draw a cool circling animation.
* make a cool background
* make the cool background performant (something about sin?)
* give the background cool colors.
* boids path around name.
* figure out why the numbers going into go from the typescript are slightly off?
* Make into my personal website, aka put my name and links to my stuff on it.
* Make colors just be uint32


NEXT

* fix click circle being darker than i expect.
* fix green background, kinda a flash bang
* make the canvas it take up the entire page.
* maybe remove the settings? or is that cool runtime reflection.
* speed up so 1k boids works.
* make Debug numbers provide better info.

* add mouse delta to input, test if it works.

* figure out the real reason the input numbers are off by 2%

* fix boid mosh pit of death (when a bunch of boids get stuck in the corner)

* speed up the simulation, would like at least 3000 boids at once, the slow part is the rendering.
* make the rendering a camera like, so you can scroll and what not.
* draw an actual image instead of the triangles? <- would require major typescript rendering, i don't think wasm has got that speed.
* have the go_boid_stuff/image use actual canvas stuff, for speed. would require a lot of refactoring on the typescript side.
* make the html canvas always be in the background of the page? so the image follows even if you scroll down, can use this for camera movement later.

* unify the collision stuff. currently 3 different systems. maybe make a collisional interface?
* boid.go: // TODO calculate position at moment of collision

* make clicking place a gravity vortex?
* make lines be able to connect to each other.
* make a conveyer like track, place it in a circle? maybe even use a curve.
* a sequence of predefined movements, to make them dance

* figure out why tinygo has frame rate hitches.
* maybe don't store the wasm_exec's in the github? just get them from the respective compilers